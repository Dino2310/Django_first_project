django-admin startproject имя проекта



для дальнейшей работы с django  её необходимо уставноить. для этого достаточно напсиать в терминале
pip install django
pip  - это команлынй менеджер утсанвок библиотек и фреймворокв на локальный компьютера

Веб приложение может быть создано внутри проекта как отдельное приложение

django даёт возможность "выдёргивать" отдельное приложение и вставлять его в другой проект. 
Такой механиз работы обеспечивается созданием проекта и отдельным прилодением, присоединением к нему


для создания проекта небходимо написать команду
django-admin startproject имя_проекта

где имя проекта необходим придумать

после того как был устновлен проект необходимо создать приложение
командой:

py mahage.py startapp имя_приложения

mahage.py - этот файл ктоторый наодиться в корневой директории проекта. Этот файл в дальнейшем понадопиться в 90% случиев для работы сс проектом

три сдаии разрадотка

первый - development - разработка
второй -staging - тестирование и доработки
третий - production  - готовый проект

asgi - 
wsgi - общение django и сервера


Списко дейсвтий после созданий имя_приложения

создать приложение недостаточно, кго необходимо подключить к проекту
для этого необходимо проделать пару простых манипуляций:

в settings.py  найти константу INSTLL_APPS  и доавить название приложения строкой

создать urls.py в нутри дирректории приложения и прописать ком
    from django.utls import path
    urlpatterns = []

подключить роутер прилодения к роутреу проетка.
для этого необходимо в urlpatterns  проекта напистаь:
    path('', include(('имя_приложения.urls', 'имя_приложения'), namespace = 'имя_приложения'))


Для отображения какой-либо инфомации на сайте необходимо следовать следущему палнй дейсвтий
 1) необходимо создать маршрутирзатор ( Путь) (новый путь в маршрутизаторе ( роутере))
 обязательно импортировать viwes в urls.py
        from . import viwes

2) создать ф-ию которая будет отображать инормацию на экране. 
    Такие ф-ии называются видами (viwes)

3) По требованию создать шаблонизарот (html file) 
    Шаблонизатор как маршрутизаторы или виды храняться
     отдельной директорией под названием templates

        templates (шаблоны) - директорией html-файлов определённого прилодения, в ктором 
        сохраняются шаблонизаторы шаблонов всех видов ( функций)

Для коректного отбороажения старницы при запросе необходимо исплользовать ф-ию render 
    которая принемет 3 аргументы
    1) запрос
    2) путь старницы
    3) контекст - инормацию, которую нужно отобрзить на экране


ВАЖНО

запуск локального хостинга через команду

py mahage.py runserver

останоить сервр можно через команду

cntr + c 


Работа с шаблонизатором

Отображение данных происходит по мехнизму MTV (MVC)
    -Model(Модель)
    -Template(Шаблон)
    -Viwe(Вид) - Controller

Когда колинет отправляет запрос, этот запрос попадает в первую очеред в маршрутизатор.
После сверки пути в адресной строке с путями urlspatterns, запуская подошедший видами
вид в свою очередь выводит информацию с БД и передаёт её в шаблонизатор через контекст


Контекас - это словарь через который передаётся инфомация с вида в шаблон

Показать эту информацию поможет специальный синтаксис (JINJA)

для отображения переменной необходимо открыть двойные фигурные скобки {{viwes}}


циклы и условия объявляются теми же клдючевыми словами и так же закрываются
ключевыми словами с префиксом end
так же обрамляются в фигруные скобки со знаком процента {% if True %}{% endif %}

В литералах вставки переменных, циклов, и условий необходимо ставить пробелы, 
кторые отделяют сам литерал от перменной условия или цикла

Модели и работа с ORM

Модель - объект, отображающий состояние и вид той или иной таблицы в БД
Именно через модель можно создать таблицу будут разные поля с ограничениями и различными типами
Так же благодаря моделям можно выводить информацию с БД

У каждой модели есть объкт objects, балгодаря которому можно использовать методы
работы с БД
Работать с БД можно через так называемые ORM - миханизмы


ORM  - это мощный инструмент в Django который через описанные модели может создать таблицы в любых СУБД(posgresql, sqlite, mysql итд)
По мимо всего, ORM даёт возможность через Python-код писать sql-запросы в БД.
разработчик пишет запрос на Python, а ORM автоматический генерирует запрос и отправляет в БД


Виды бывают

function based viwes
class based viwes


Миграции в Django
Миграции - это способ документирования изменений в моделя приложжения. Именно благодаря миграциям Django меняет структуру БД

После создания приложения модели  есть 2 обязательные манипуляции

При любых изменнениях моедлей необходимо делать миграцию

1)Создание файла миграци в кажждом католоне migartion  Такой католо создаётся автоматически В КАЖДОМ ПРИЛОЖЕНИИ
    Для создания прилодения необходимо ввести команду
        py manage.py makemegration - создаёт файл миграции в папке migartion
    После выполонения команды стразц появится файл который будет начинаться с чилосовго зняения 
    по типу "0001_inital", в котором описаны все измененеия систеы модели

2) Отправка миграци. которая обеспечит изменения структуры БД:
    py manage.py manage - отправка в БД файла миграци после его создания

Эти 2 шага очень важны, ибо именно благодаря миграциям происходи тазвиттиие структуры моделей в приложении.
 Поэтому миграции ни в коем случа нельзя удалять, особенно с середины. Для таких случаев есть команды откатов изменений до опредлённого момента 


Запись данных в БД
может происходить разными способами
    1) SQL - запрос. Через СУБД отправить запрос в БД
    2) ORM - запрос. написать в Python-код, который Django переведёт в SQL-запрос и автоматически отправит
    3) Через админку - Веб приложение которое идёт из коробки вместе с уставноленным поектом. Одна админка может вмещать в себя все приложения уставноленные в проекте
        Админка  - интерактивный инструмент модификации БД

Для дальнейшей успешной работы с админкой в первую очередь нужно создать super user

super user - это авторизованный пользователь, который обладает по умолчаию всеми правами данными Django
Создать его можно командой 

    py manage.py createsuperuser

Что добавить новые данные или отредактиваровать старые в определённой таблице, необходим зарегистрировать е модель предваирительно импортируя её

from .models import *
admin.site.register(Model_Name)

Инструкция подключения статический файлов в Django проекте

1) Создать папку под названием static  на одном уровне с файлом manage.py
2)После того как пака создана её необходимо происходить к проекту
    для этого необходимо сделать возможным просмотр содержимого файлов с браузера. 
    Для такой настройки сущесвтует консната STATICFILES_DIRS
    в settings.py необходимо добавить Запись
        import os
        STATICFILES_DIRS = [
        os.path.join(BASE_DIR, 'static')
        ]


3) в файле urls.py добавить следущие строки

    from django.conf.urls.static import static
    from django.conf import settings

    urlpatterns += static(
    settings.STATIC_URL,
      document_root = settings.STATIC_ROOT)

4) Подклчюение статического файла html
    в начале страниы добавить
    {% load static %}
    и подлючить линк в head
    <link rel="stylesheet" href="{% static 'style.css' %}">













